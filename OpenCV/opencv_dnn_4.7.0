#!/bin/bash

# Tested on ubuntu 20.04 and 22.04

echo '------------------------------'
echo 'Step #1: Install OpenCV and “dnn” dependencies'
sudo apt -y update
sudo apt -y upgrade

#CMake and GCC are required to configure the installation and compile the project:
sudo apt install -y git build-essential cmake gcc g++ pkg-config

#To support Python 3 installations, we need Python (it comes pre-installed with most Ubuntu versions), Python-devel and Numpy:
sudo apt install -y python3 python3-dev python3-numpy

#GTK is requried for GUI features, Camera support (v4l), Media Support (ffmpeg, gstreamer…), etc.:
sudo apt install -y libavcodec-dev libavformat-dev libswscale-dev
sudo apt install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
sudo apt install -y libgtk2.0-dev libgtk-3-dev

#The next dependencies are optional but add the latest support for PNG, JPEG, JPEG2000, TIFF, WebP, etc. formats:
sudo apt install -y libpng-dev libjpeg-dev libopenexr-dev libtiff-dev libwebp-dev

#openjdk is requried for JNI:
sudo apt install -y openjdk-8-jdk
echo 'JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' >> ~/.bashrc
source .bashrc

#Requried for TBB:
sudo apt install -y libtbb2 libtbb-dev

#Requried for libdc:
sudo apt install -y libdc1394-25 libdc1394-dev libopenblas-dev

#Requried for OpenGL:
sudo apt-get install -y libgtkglext1 libgtkglext1-dev

#Requried for HDF5:
sudo apt install -y libhdf5-dev

#Requried for tesseract:
sudo apt install -y tesseract-ocr libtesseract-dev

#Requried for EIGEN:
sudo apt install -y libeigen3-dev

#Requried for Atlas:
sudo apt install -y libatlas-base-dev libatlas3-base liblapacke-dev liblapack-dev

#Requried for QT5:
sudo apt install -y qtbase5-dev qt5-qmake qttools5-dev qttools5-dev-tools qtwebengine5-dev libqt5svg5-dev libqt5websockets5-dev

echo '------------------------------'
echo 'Step #2: Download OpenCV source code'
cd ~
#wget -O opencv.zip https://github.com/opencv/opencv/archive/4.7.0.zip
#wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.7.0.zip
unzip opencv.zip
unzip opencv_contrib.zip
mv opencv-4.7.0 opencv
mv opencv_contrib-4.7.0 opencv_contrib

echo '------------------------------'
echo 'Step #3: Configure OpenCV with NVIDIA GPU support'
cd ~/opencv
mkdir build
cd build

cmake \
-D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_CUDA=ON \
-D WITH_CUDNN=ON \
-D CUDA_ARCH_BIN=7.5 \
-D OPENCV_DNN_CUDA=ON \
-D WITH_TBB=ON \
-D WITH_CUBLAS=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=$HOME/opencv_contrib/modules \
-D HAVE_opencv_python3=ON \
-D BUILD_EXAMPLES=OFF \
-D WITH_QT=ON \
-D WITH_V4L=ON \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D ENABLE_CXX11=ON \
-D WITH_OPENGL=ON \
-D WITH_EIGEN=ON \
-D OPENCV_GENERATE_PKGCONFIG=YES \
..

echo '------------------------------'
echo 'Step #4: Install OpenCV'

make -j$(nproc)
sudo make install
sudo ldconfig

sudo ln -s /usr/local/lib/python3.*/site-packages/cv2 /usr/local/lib/python3.*/dist-packages/cv2

cd ~
rm -rf opencv opencv_contrib

##########################################################################################################
# Test opencv in python3
# use this command in terminal
#python3
#import cv2
#cv2.cuda.printCudaDeviceInfo(0)

##########################################################################################################
# Failed logs:

#-- Performing Test HAVE_C_WNON_VIRTUAL_DTOR - Failed

#-- Performing Test HAVE_CXX_WMISSING_PROTOTYPES - Failed

#-- Performing Test HAVE_CXX_WSTRICT_PROTOTYPES - Failed

#-- Performing Test HAVE_C_WSIGN_PROMO - Failed

#-- Performing Test HAVE_C_WSUGGEST_OVERRIDE - Failed

#-- Performing Test HAVE_C_WNO_DELETE_NON_VIRTUAL_DTOR - Failed

#-- Performing Test HAVE_CXX_WNO_UNNAMED_TYPE_TEMPLATE_ARGS - Failed

#-- Performing Test HAVE_C_WNO_UNNAMED_TYPE_TEMPLATE_ARGS - Failed

#-- Performing Test HAVE_C_FVISIBILITY_INLINES_HIDDEN - Failed

#-- Performing Test HAVE_C_WNO_IMPLICIT_CONST_INT_FLOAT_CONVERSION - Failed

#-- Looking for _aligned_malloc - not found

#-- Could not find OpenBLAS include. Turning OpenBLAS_FOUND off
#-- Could not find OpenBLAS lib. Turning OpenBLAS_FOUND off

#-- Performing Test HAVE_CXX_WNO_MISSING_PROTOTYPES - Failed

#-- Performing Test HAVE_CXX_WNO_TAUTOLOGICAL_UNDEFINED_COMPARE - Failed

#-- Performing Test HAVE_CXX_WNO_SHORTEN_64_TO_32 - Failed

#-- Performing Test HAVE_CXX_WNO_ENUM_COMPARE_SWITCH - Failed

#-- Performing Test HAVE_CXX_WNO_INCONSISTENT_MISSING_OVERRIDE - Failed

#-- VTK is not found. Please set -DVTK_DIR in CMake to VTK build directory, or to VTK install subdirectory with VTKConfig.cmake file

#--   No package 'libavresample' found

#-- Julia not found. Not compiling Julia Bindings. 
#-- Module opencv_ovis disabled because OGRE3D was not found
#-- No preference for use of exported gflags CMake configuration set, and no hints for include/library directories provided. Defaulting to preferring an installed/exported gflags CMake configuration if available.
#-- Failed to find installed gflags CMake configuration, searching for gflags build directories exported with CMake.
#-- Failed to find gflags - Failed to find an installed/exported CMake configuration for gflags, will perform search for installed gflags components.
#-- Failed to find gflags - Could not find gflags include directory, set GFLAGS_INCLUDE_DIR to directory containing gflags/gflags.h
#-- Failed to find glog - Could not find glog include directory, set GLOG_INCLUDE_DIR to directory containing glog/logging.h
#-- Module opencv_sfm disabled because the following dependencies are not found: Glog/Gflags

